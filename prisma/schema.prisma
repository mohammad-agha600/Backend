// prisma/schema.prisma

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
  
}

model User {
  id        String     @id @default(cuid())
  email     String     @unique
  username  String?
  password  String?
  isAdmin   Boolean     @default(false)
  provider  String?  @default("credentials")
  cart      Cart?
  orders    Order[]
  createdAt DateTime   @default(now())
   wishlists  Wishlist[]
}

model Category {
  id  String @id @default(cuid())
  name String @unique
  image  String?
  products Product[]
  tags    Tag[]
}
model Tag {
  id          String       @id @default(cuid())
  name        String
  slug        String       @unique
  parentId    String?      
  parent      Tag?         @relation("TagHierarchy", fields: [parentId], references: [id])
  children    Tag[]        @relation("TagHierarchy")
  category     Category? @relation(fields: [categoryId],references: [id])
  categoryId     String?
  productTags ProductTag[]

  @@unique([name, parentId]) //  Composite uniqueness constraint
}


model ProductTag {
  id        String   @id @default(cuid())
  product   Product  @relation(fields: [productId], references: [id])
  productId String
  tag       Tag      @relation(fields: [tagId], references: [id])
  tagId     String

  @@unique([productId, tagId])
}

model Product {
  id          String           @id @default(cuid())
  name        String
  slug        String           @unique
  description String?
  price       Int
  image       String
  stock       Int              @default(0)
  discount    Int?
  createdAt   DateTime         @default(now())
 
  categoryId  String
  category    Category        @relation(fields: [categoryId], references: [id])
  productTags ProductTag[]

  images      ProductImage[]
  orderItems  OrderItem[]
  cartItems   CartItem[]
  variantCombinations ProductVariantCombination[]
   wishlists  Wishlist[]
}


model Variant {
  id        String   @id @default(cuid())
  key       String   // e.g., "Size", "Color"
  value     String   // e.g., "Small", "Red"
  createdAt DateTime @default(now())

  @@unique([key, value])
  variantCombinations ProductVariantCombinationVariant[]
}

model ProductVariantCombination {
  id         String      @id @default(cuid())
  productId  String
  price      Int?
  stock      Int         @default(0)
  image      String?     
  product    Product     @relation(fields: [productId], references: [id])
  variants   ProductVariantCombinationVariant[]
  createdAt  DateTime    @default(now())

  cartItems  CartItem[]  @relation("CombinationToCartItems") // âœ… named relation
}


model ProductVariantCombinationVariant {
  id                            String   @id @default(cuid())
  productVariantCombinationId   String
  variantId                     String

  combination ProductVariantCombination @relation(fields: [productVariantCombinationId], references: [id])
  variant     Variant                   @relation(fields: [variantId], references: [id],onDelete: Cascade)

  @@unique([productVariantCombinationId, variantId])
}

model Cart {
  id        String      @id @default(cuid())
  userId    String      @unique
  user      User        @relation(fields: [userId], references: [id])
  items     CartItem[]
  updatedAt DateTime    @updatedAt
}

model CartItem {
  id            String    @id @default(cuid())
  cartId        String
  productId     String
  quantity      Int       @default(1)
  size         String?
  color         String?
  combinationId String?
  combination   ProductVariantCombination? @relation("CombinationToCartItems", fields: [combinationId], references: [id]) 

  cart          Cart      @relation(fields: [cartId], references: [id])
  product       Product   @relation(fields: [productId], references: [id])
}

model Order {
  id          String       @id @default(cuid())
  userId      String
  user        User         @relation(fields: [userId], references: [id])
  totalAmount Int
  paymentStatus    String       @default("pending")
  isPaid       Boolean   @default(false)
  items       OrderItem[]
  paymentMethod String   @default("cod")
  createdAt   DateTime     @default(now())
  status      String    @default("pending")
  trackingNumber  String?  
  deliveredAt   DateTime?
  contactPhone    String     
  contactEmail    String? 
  shippingAddress  ShippingAddress @relation(fields:[shippingAddressId],references: [id])
  shippingAddressId  String
  billingAddress  BillingAddress? @relation(fields: [billingAddressId],references: [id])
  billingAddressId   String?
  couponCode      String?
  couponId         String?
  shippingAmount   Float?
  discountAmount    Float  @default(0)
  
}

model ShippingAddress {
  id         String   @id @default(uuid())
  firstName  String
  lastName   String
  address    String
  apartment  String?
  city       String
  state      String?
  postalCode String
  country    String
  phone      String
  order      Order[]
}

model BillingAddress {
  id         String   @id @default(uuid())
  firstName  String
  lastName   String
  address    String
  apartment  String?
  city       String
  state      String?
  postalCode String
  country    String
  phone      String
  order      Order[]
}


model OrderItem {
  id        String    @id @default(cuid())
  orderId   String
  productId String
  quantity  Int
  price     Int
  size       String
  color      String
  order     Order     @relation(fields: [orderId], references: [id])
  product   Product   @relation(fields: [productId], references: [id])
}

model ProductImage {
  id String @id @default(cuid())
  url String
  product Product @relation(fields:[productId],references:[id])
  productId String
}

enum CouponType {
  PERCENTAGE
  FIXED
}

model Coupon {
  id          String      @id @default(cuid())
  code        String      @unique
  discount    Int
  type        CouponType
  expiresAt   DateTime?
  usageLimit  Int?
  usageCount  Int         @default(0) // <-- new field
  createdAt   DateTime    @default(now())
}



model Banner {
  id         String   @id @default(cuid())
  title      String?  // Optional: e.g. "Summer Sale"
  subheading String?  // Optional: e.g. "Up to 50% Off"
  paragraph  String?  // Optional: extra descriptive text
  imageUrl   String   // URL or path to image
  linkUrl    String?  // Optional: link to product/category/etc.
  position   Int      // 1 to 7 (or more if you allow)
  active     Boolean  @default(true)
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
}
model Setting {
  id             String   @id @default(cuid())
  currency       String   @default("PKR")
  shippingRate   Float    @default(0)
  dhlCharge      Float    @default(0)
  updatedAt      DateTime @updatedAt
}


model Wishlist {
  id        String   @id @default(uuid())
  user      User     @relation(fields: [userId], references: [id])
  userId    String
  product   Product  @relation(fields: [productId], references: [id])
  productId String
  createdAt DateTime @default(now())

  @@unique([userId, productId]) // Prevent duplicate wishlist items
}

